{
    "gulp.autoDetect": "on",
    "code-runner.saveAllFilesBeforeRun": true,
    "code-runner.saveFileBeforeRun": true,
    "editor.fontSize": 16,
    "terminal.integrated.fontSize": 16,
    "workbench.editorAssociations": {
        "*.ipynb": "jupyter-notebook"
    },
    "python.pythonPath": "C:\\ProgramData\\Anaconda3\\python.exe",
    "terminal.integrated.gpuAcceleration": "no",
    "editor.fontFamily": "'Cascadia Code','Operator Mono Lig','Dank Mono',Inconsolata,'Courier New', Consolas, 'Courier New', monospace",
    // "editor.fontFamily": "'Ubuntu', sans-serif",
    "editor.fontLigatures": true,
    "editor.formatOnSave": true,
    "C_Cpp.updateChannel": "Insiders",
    "editor.mouseWheelZoom": true,
    "code-runner.clearPreviousOutput": true,
    "editor.suggestSelection": "first",
    "vsintellicode.modify.editor.suggestSelection": "automaticallyOverrodeDefaultValue",
    "notebook.cellToolbarLocation": {
        "default": "right",
        "jupyter-notebook": "left"
    },
    "editor.inlineSuggest.enabled": true,
    "python.defaultInterpreterPath": "C:\\ProgramData\\Anaconda3\\python.exe",
    "workbench.editor.enablePreview": false,
    "terminal.integrated.defaultProfile.windows": "PowerShell",
    "code-runner.runInTerminal": true,
    "code-runner.executorMap": {
        "javascript": "node",
        "java": "cd $dir && javac $fileName && java $fileNameWithoutExt",
        "c": "cd $dir && gcc $fileName -o $fileNameWithoutExt && $dir$fileNameWithoutExt",
        "cpp": "cd $dir && g++ $fileName -o $fileNameWithoutExt && $dir$fileNameWithoutExt",
        "objective-c": "cd $dir && gcc -framework Cocoa $fileName -o $fileNameWithoutExt && $dir$fileNameWithoutExt",
        "php": "php",
        "python": "python -u",
        "perl": "perl",
        "perl6": "perl6",
        "ruby": "ruby",
        "go": "go run",
        "lua": "lua",
        "groovy": "groovy",
        "powershell": "powershell -ExecutionPolicy ByPass -File",
        "bat": "cmd /c",
        "shellscript": "bash",
        "fsharp": "fsi",
        "csharp": "scriptcs",
        "vbscript": "cscript //Nologo",
        "typescript": "ts-node",
        "coffeescript": "coffee",
        "scala": "scala",
        "swift": "swift",
        "julia": "julia",
        "crystal": "crystal",
        "ocaml": "ocaml",
        "r": "Rscript",
        "applescript": "osascript",
        "clojure": "lein exec",
        "haxe": "haxe --cwd $dirWithoutTrailingSlash --run $fileNameWithoutExt",
        "rust": "cd $dir && rustc $fileName && $dir$fileNameWithoutExt",
        "racket": "racket",
        "scheme": "csi -script",
        "ahk": "autohotkey",
        "autoit": "autoit3",
        "dart": "dart",
        "pascal": "cd $dir && fpc $fileName && $dir$fileNameWithoutExt",
        "d": "cd $dir && dmd $fileName && $dir$fileNameWithoutExt",
        "haskell": "runhaskell",
        "nim": "nim compile --verbosity:0 --hints:off --run",
        "lisp": "sbcl --script",
        "kit": "kitc --run",
        "v": "v run",
        "sass": "sass --style expanded",
        "scss": "scss --style expanded",
        "less": "cd $dir && lessc $fileName $fileNameWithoutExt.css",
        "FortranFreeForm": "cd $dir && gfortran $fileName -o $fileNameWithoutExt && $dir$fileNameWithoutExt",
        "fortran-modern": "cd $dir && gfortran $fileName -o $fileNameWithoutExt && $dir$fileNameWithoutExt",
        "fortran_fixed-form": "cd $dir && gfortran $fileName -o $fileNameWithoutExt && $dir$fileNameWithoutExt",
        "fortran": "cd $dir && gfortran $fileName -o $fileNameWithoutExt && $dir$fileNameWithoutExt"
    },
    "workbench.colorTheme": "Sublime Material Theme - Dark",
    "workbench.iconTheme": "vscode-icons",
    "workbench.sideBar.location": "right",
    "code-runner.languageIdToFileExtensionMap": {
    #include <bits/stdc++.h>
    #include <ext/pb_ds/assoc_container.hpp> 
    using namespace std;
    using namespace __gnu_pbds; 
    #define     mod             1e9+7
    #define     MOD             998244353
    #define     ll              long long
    #define     mp              make_pair
    #define     F               first
    #define     S               second
    #define     pb              emplace_back
    #define     pf              emplace_front
    #define     all(p)          p.begin(), p.end()
    #define     rep(i,a,b)      for( i=a;i<b;++i)
    #define     repr(i,a,b)     for( i=a;i>=b;i--)
    #define     up              upper_bound
    #define     lb              lower_bound
    #define     t()             int test;cin>>test;while(test--)
    #define     setbits(x)      __builtin_popcountll(x)
    #define     si              set<int>
    #define     ii              pair<int,int>
    #define     que_max         priority_queue <int>
    #define     que_min         priority_queue <int, vi, greater<int> >
    #define     isOn(S, j)      (S & (1 << j))
    #define     setBit(S, j)    (S |= (1 << j))
    #define     clearBit(S, j)  (S &= ~(1 << j))
    #define     toggleBit(S, j) (S ^= (1 << j))
    #define     lowBit(S)       (S & (-S))
    #define     setAll(S, n)    (S = (1 << n) - 1)
    #define     isPowerOfTwo(S) (!(S & (S - 1)))
    #define     nearestPowerOfTwo(S) ((int)pow(2.0, (int)((log((double)S) / log(2.0)) + 0.5)))
    #define     turnOffLastBit(S) ((S) & (S - 1))
    #define     turnOnLastZero(S) ((S) | (S + 1))
    #define     turnOffLastConsecutiveBits(S) ((S) & (S + 1))
    #define     turnOnLastConsecutiveZeroes(S) ((S) | (S - 1))
    #define     IOS             ios: :sync_with_stdio(0); cin.tie(0); cout.tie(0);
    #define     endl            "\n"
    typedef tree<ii, null_type, less<ii>, rb_tree_tag, tree_order_statistics_node_update> pbds;
    
    #define TRACE
    #ifdef TRACE
    #define trace(...) __f(#__VA_ARGS__, __VA_ARGS__)
        template <typename Arg1>
        void __f(const char* name, Arg1&& arg1){
            cout << name << " : " << arg1 << endl;
            //use cerr if u want to display at the bottom
        }
        template <typename Arg1, typename... Args>
        void __f(const char* names, Arg1&& arg1, Args&&... args){
            const char* comma = strchr(names + 1, ','); cout.write(names, comma - names) << " : " << arg1<<" | ";__f(comma+1, args...);
        }
    #else
    #define trace(...)
    #endif
    
    int N=1e5;    
    
     
    int32_t main()
         
    {     
        #ifndef ONLINE_JUDGE
        freopen("input.txt",
            "r", stdin);
        freopen("output 2.txt",
            "w", stdout);
        #endif
    
        IOS;
        
        t()
        {
          int n,x,i;
          cin>>n;
          x=100,i=9;
          while(n--)
          {
           trace(n,x,i);
            x++;
            i--;
                }
            }
        }
        "bat": ".bat",
        "powershell": ".ps1",
        "typescript": ".ts"
    }
}